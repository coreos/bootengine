#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# ex: ts=8 sw=4 sts=4 et filetype=sh

set -e

UNIT_DIR="${1:-/tmp}"

# Usage: cmdline_arg name default_value
cmdline=( $(</proc/cmdline) )
cmdline_arg() {
    local name="$1" value="$2"
    for arg in "${cmdline[@]}"; do
        if [[ "${arg%%=*}" == "${name}" ]]; then
            value="${arg#*=}"
        fi
    done
    echo "${value}"
}

add_requires() {
    local name="$1"
    local requires_dir="${UNIT_DIR}/initrd-root-fs.target.requires"
    mkdir -p "${requires_dir}"
    ln -sf "../${name}" "${requires_dir}/${name}"
}

# set to 1 to enable copying /usr/share/oem from the initrd
copy_oem=0
# check both the new mount.usr and our old usr kernel options
usr=$(cmdline_arg mount.usr "$(cmdline_arg usr)")
root=$(cmdline_arg root)
rootfstype=$(cmdline_arg rootfstype tmpfs)
rootflags=$(cmdline_arg rootflags)

# If usr= was not specified and a squashfs is bundled in the initrd use it.
if [[ -z "${usr}" && -f /usr.squashfs ]]; then
    copy_oem=1
    add_requires sysroot-usr.mount
    cat >"${UNIT_DIR}/sysroot-usr.mount" <<EOF
# Automatically generated by diskless-generator

[Unit]
Before=initrd-root-fs.target
Wants=remount-sysroot.service
After=remount-sysroot.service
# Make sure the loop device nodes are available
Wants=systemd-tmpfiles-setup-dev.service
After=systemd-tmpfiles-setup-dev.service

[Mount]
What=/usr.squashfs
Where=/sysroot/usr
Type=squashfs
EOF
fi

# When root= and rootfstype= are unspecified mount it as a tmpfs
if [[ -z "${root}" && "${rootfstype}" == tmpfs ]]; then
    add_requires sysroot.mount
    cat >"${UNIT_DIR}/sysroot.mount" <<EOF
# Automatically generated by diskless-generator

[Unit]
Before=initrd-root-fs.target

[Mount]
What=tmpfs
Where=/sysroot
Type=tmpfs
Options=${rootflags:-mode=755}
EOF

# Alternatively support using btrfs in ram instead of tmpfs
elif [[ -z "${root}" && "${rootfstype}" == btrfs ]]; then
    add_requires sysroot.mount
    cat >"${UNIT_DIR}/sysroot.mount" <<EOF
# Automatically generated by diskless-generator

[Unit]
Requires=diskless-btrfs.service
After=diskless-btrfs.service
Before=initrd-root-fs.target

[Mount]
What=/root.btrfs
Where=/sysroot
Type=btrfs
Options=loop,compress=lzo,discard${rootflags:+,$rootflags}
EOF

    cat >"${UNIT_DIR}/diskless-btrfs.service" <<EOF
# Automatically generated by diskless-generator

[Unit]
DefaultDependencies=no
# Make sure the loop device nodes are available
Wants=systemd-tmpfiles-setup-dev.service
After=systemd-tmpfiles-setup-dev.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/lib/systemd/diskless-btrfs
EOF

elif [[ -z "${root}" && "${rootfstype}" == zram ]]; then
    add_requires sysroot.mount
    cat >"${UNIT_DIR}/sysroot.mount" <<EOF
# Automatically generated by diskless-generator

[Unit]
Requires=diskless-zram.service
After=diskless-zram.service
Before=initrd-root-fs.target

[Mount]
What=LABEL=SYSROOT
Where=/sysroot
Type=ext4
Options=${rootflags:-mode=755}
EOF

    cat >"${UNIT_DIR}/diskless-zram.service" <<EOF
# Automatically generated by diskless-generator

[Unit]
DefaultDependencies=no
# Make sure the loop device nodes are available
Wants=systemd-tmpfiles-setup-dev.service
After=systemd-tmpfiles-setup-dev.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/lib/systemd/diskless-zram
EOF

# Legacy support of amd64-generic images
elif [[ "${root%%:*}" == squashfs ]]; then
    copy_oem=1
    add_requires sysroot.mount
    cat >"${UNIT_DIR}/sysroot.mount" <<EOF
# Automatically generated by diskless-generator

[Unit]
Before=initrd-root-fs.target
# Make sure the loop device nodes are available
Wants=systemd-tmpfiles-setup-dev.service
After=systemd-tmpfiles-setup-dev.service

[Mount]
What=/newroot.squashfs
Where=/sysroot
Type=squashfs
EOF
fi

# When /usr is provided by the initrd then OEM may be also, but as tmpfs.
# The contents are of /usr/share/oem are copied into place by 80setup-root
if [[ "${copy_oem}" -eq 1 && -d /usr/share/oem ]]; then
    add_requires sysroot-usr-share-oem.mount
    cat >"${UNIT_DIR}/sysroot-usr-share-oem.mount" <<EOF
# Automatically generated by diskless-generator

[Unit]
Before=initrd-root-fs.target

[Mount]
What=tmpfs
Where=/sysroot/usr/share/oem
Type=tmpfs
Options=size=0,mode=755
EOF
fi
